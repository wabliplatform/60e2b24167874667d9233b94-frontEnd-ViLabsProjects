/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Workpackage from '../model/Workpackage';

/**
* Workpackage service.
* @module api/WorkpackageApi
* @version 1.0.0
*/
export default class WorkpackageApi {

    /**
    * Constructs a new WorkpackageApi. 
    * @alias module:api/WorkpackageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createworkpackage operation.
     * @callback module:api/WorkpackageApi~createworkpackageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Workpackage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Workpackage} workpackage data to be created
     * @param {module:api/WorkpackageApi~createworkpackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Workpackage}
     */
    createworkpackage(workpackage, callback) {
      let postBody = workpackage;
      // verify the required parameter 'workpackage' is set
      if (workpackage === undefined || workpackage === null) {
        throw new Error("Missing the required parameter 'workpackage' when calling createworkpackage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Workpackage;
      return this.apiClient.callApi(
        '/workpackage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteworkpackage operation.
     * @callback module:api/WorkpackageApi~deleteworkpackageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} workpackageId the Id parameter
     * @param {module:api/WorkpackageApi~deleteworkpackageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteworkpackage(workpackageId, callback) {
      let postBody = null;
      // verify the required parameter 'workpackageId' is set
      if (workpackageId === undefined || workpackageId === null) {
        throw new Error("Missing the required parameter 'workpackageId' when calling deleteworkpackage");
      }

      let pathParams = {
        'workpackageId': workpackageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/workpackage/{workpackageId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllworkpackage operation.
     * @callback module:api/WorkpackageApi~getAllworkpackageCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Workpackage>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/WorkpackageApi~getAllworkpackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Workpackage>}
     */
    getAllworkpackage(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Workpackage];
      return this.apiClient.callApi(
        '/workpackage/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getworkpackage operation.
     * @callback module:api/WorkpackageApi~getworkpackageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Workpackage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} workpackageId the Id parameter
     * @param {module:api/WorkpackageApi~getworkpackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Workpackage}
     */
    getworkpackage(workpackageId, callback) {
      let postBody = null;
      // verify the required parameter 'workpackageId' is set
      if (workpackageId === undefined || workpackageId === null) {
        throw new Error("Missing the required parameter 'workpackageId' when calling getworkpackage");
      }

      let pathParams = {
        'workpackageId': workpackageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Workpackage;
      return this.apiClient.callApi(
        '/workpackage/{workpackageId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateworkpackage operation.
     * @callback module:api/WorkpackageApi~updateworkpackageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Workpackage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} workpackageId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Workpackage} opts.workpackage data to be updated
     * @param {module:api/WorkpackageApi~updateworkpackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Workpackage}
     */
    updateworkpackage(workpackageId, opts, callback) {
      opts = opts || {};
      let postBody = opts['workpackage'];
      // verify the required parameter 'workpackageId' is set
      if (workpackageId === undefined || workpackageId === null) {
        throw new Error("Missing the required parameter 'workpackageId' when calling updateworkpackage");
      }

      let pathParams = {
        'workpackageId': workpackageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Workpackage;
      return this.apiClient.callApi(
        '/workpackage/{workpackageId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
